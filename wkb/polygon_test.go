package wkb

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPolygon(t *testing.T) {
	valid := []byte{
		0x01, 0x03, 0x00, 0x00, 0x00, // header
		0x01, 0x00, 0x00, 0x00, // numlinearring - 1
		0x05, 0x00, 0x00, 0x00, // numpoints - 5
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40, // point 1
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, // point 2
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, // point 3
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, // point 4
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40, // point 5
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
	}

	p := Polygon{}
	if err := p.Scan(valid); assert.NoError(t, err) {
		assert.Equal(t, Polygon{
			LinearRing{{30, 10}, {40, 40}, {20, 40}, {10, 20}, {30, 10}},
		}, p)
	}
}

func TestMultiPolygon(t *testing.T) {
	valid := []byte{
		0x01, 0x06, 0x00, 0x00, 0x00, // header
		0x02, 0x00, 0x00, 0x00, // numpolygon - 2
		0x01, 0x03, 0x00, 0x00, 0x00, // polygon 1
		0x01, 0x00, 0x00, 0x00, // numlinearring - 1
		0x04, 0x00, 0x00, 0x00, // numpoints - 4,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40,
		0x01, 0x03, 0x00, 0x00, 0x00, // polygon 2
		0x01, 0x00, 0x00, 0x00, // numlinearring - 1
		0x05, 0x00, 0x00, 0x00, // numpoints - 5
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40,
	}

	mp := MultiPolygon{}
	if err := mp.Scan(valid); assert.NoError(t, err) {
		assert.Equal(t, MultiPolygon{
			Polygon{
				LinearRing{{30, 20}, {45, 40}, {10, 40}, {30, 20}},
			},
			Polygon{
				LinearRing{{15, 5}, {40, 10}, {10, 20}, {5, 10}, {15, 5}},
			},
		}, mp)
	}

}
