package wkb

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPoint(t *testing.T) {
	invalid := map[error][]byte{
		ErrUnsupportedValue: {
			0x01,
		}, // header too short
		ErrInvalidStorage: {
			0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
		}, // no coordinates
		ErrInvalidStorage: {
			0x02, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
		}, // invalid endianness
		ErrInvalidStorage: {
			0x01, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
		}, // single coordinate only
		ErrUnsupportedValue: {
			0x02, 0x02, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
		}, // invalid type
	}

	for expected, b := range invalid {
		p := Point{}
		if err := p.Scan(b); assert.Error(t, err) {
			assert.Equal(t, expected, err)
		}
	}

	valid := []byte{
		0x01, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
	}
	p := Point{}
	if assert.NoError(t, p.Scan(valid)) {
		assert.Equal(t, 30.0, p.X)
		assert.Equal(t, 10.0, p.Y)
	}
}
